addUser:
  args:
  - name
  - password
  - email
  documentation: "Adds a new user to the system.\n@type  name: string\n@param name:\
    \ The unique identifier of the user, same as their login\n@type  password: string\n\
    @param password: the password of the new user\n@type  groups: list of strings\n\
    @param groups: (optional) groups to be applied to the new user\n@type  roles:\
    \ list of strings\n@param roles: (optional) roles to be applied to the new user\n\
    @rtype:   DirectResponse\n@return:  B{Properties}:\n     - data: properties of\
    \ the new users"
  kwargs:
    groups: []
    roles: []
addUsersToGroups:
  args:
  - users
  - groups
  documentation: 'Adds listed users to the given group.

    @type  users: List of Strings

    @param users: (optional) user ids to add to groups.

    @type  groups: List of Strings

    @param groups: (optional) group ids users will be added to.'
  kwargs: {}
assignAdminRolesToUsers:
  args:
  - users
  documentation: 'Assign the admin roles to the given users.

    @type  users: List of Strings

    @param users: (optional) user ids to assign admin roles to.'
  kwargs: {}
assignZenUserRoleToUsers:
  args:
  - users
  documentation: 'Assign the ZenUser role to the given users.

    @type  users: List of Strings

    @param users: (optional) user ids to assign zenuser roles to.'
  kwargs: {}
createGroups:
  args:
  - groups
  documentation: "Adds a new group to the system.\n@type  groups: list of string\n\
    @param groups: The unique names of each group\n@rtype:   DirectResponse\n@return:\
    \  B{Properties}:\n     - data: properties of the new users"
  kwargs: {}
deleteGroups:
  args:
  - groups
  documentation: 'Removes all the users from the given group then deletes the group.

    @type  groups: List of Strings

    @param groups: (optional) group ids to remove.'
  kwargs: {}
deleteUsers:
  args:
  - users
  documentation: 'Removes all the users with the given user ids. Will continue

    upon removing users if an invalid id is specified.

    @type  users: List of Strings

    @param users: (optional) list of user ids to remove.'
  kwargs: {}
getGroups:
  args: []
  documentation: "Retrieves a list of groups. This method supports pagination.\n@type\
    \  start: integer\n@param start: (optional) Offset to return the results from;\
    \ used in\n              pagination (default: 0)\n@type  name: string\n@param\
    \ name: (optional) filter to be applied to groups returned (default: None)\n@type\
    \  limit: integer\n@param limit: (optional) Number of items to return; used in\
    \ pagination\n              (default: 50)\n@type  sort: string\n@param sort: (optional)\
    \ Key on which to sort the return results (default:\n             'name')\n@type\
    \  dir: string\n@param dir: (optional) Sort order; can be either 'ASC' or 'DESC'\n\
    \            (default: 'ASC')\n@rtype:   DirectResponse\n@return:  B{Properties}:\n\
    \     - data: (list) Dictionaries of group properties\n     - totalCount: (integer)\
    \ Number of devices returned"
  kwargs:
    dir: ASC
    keys: null
    limit: 50
    name: null
    page: 0
    sort: name
    start: 0
getUsers:
  args: []
  documentation: "Retrieves a list of users. This method supports pagination.\n@type\
    \  start: integer\n@param start: (optional) Offset to return the results from;\
    \ used in\n              pagination (default: 0)\n@type  name: string\n@param\
    \ name: (optional) filter to be applied to users returned (default: None)\n@type\
    \  limit: integer\n@param limit: (optional) Number of items to return; used in\
    \ pagination\n              (default: 50)\n@type  sort: string\n@param sort: (optional)\
    \ Key on which to sort the return results (default:\n             'name')\n@type\
    \  dir: string\n@param dir: (optional) Sort order; can be either 'ASC' or 'DESC'\n\
    \            (default: 'ASC')\n@rtype:   DirectResponse\n@return:  B{Properties}:\n\
    \     - data: (list) Dictionaries of user properties\n     - totalCount: (integer)\
    \ Number of devices returned"
  kwargs:
    dir: ASC
    keys: null
    limit: 50
    name: null
    page: 0
    sort: name
    start: 0
listGroupsForUser:
  args:
  - users
  documentation: 'Lists all the groups for each provided user.

    @type  users: List of Strings

    @param users: user ids to get group info.'
  kwargs: {}
listUsersInGroup:
  args:
  - groups
  documentation: 'Lists all the users belonging to each provided group.

    @type  groups: List of Strings

    @param groups: groups to get user ids.'
  kwargs: {}
removeAdminRolesFromUsers:
  args:
  - users
  documentation: 'Removes the admin roles from the given users.

    @type  users: List of Strings

    @param users: (optional) user ids to remove admin roles from.'
  kwargs: {}
removeUsersFromGroups:
  args:
  - users
  - groups
  documentation: 'Removes listed users from the given group.

    @type  users: List of Strings

    @param users: (optional) user ids to add to groups.

    @type  groups: List of Strings

    @param groups: (optional) group ids users will be removed from.'
  kwargs: {}
removeZenUserRoleFromUsers:
  args:
  - users
  documentation: 'Removes the ZenUser role from the given users.

    @type  users: List of Strings

    @param users: (optional) user ids to remove zenuser role from.'
  kwargs: {}
setAdminPassword:
  args:
  - newPassword
  documentation: null
  kwargs: {}
